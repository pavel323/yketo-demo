"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.setPromise = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _getPrototypeOf = _interopRequireDefault(require("@babel/runtime/core-js/object/get-prototype-of"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _promise = _interopRequireDefault(require("@babel/runtime/core-js/promise"));

var _react = _interopRequireWildcard(require("react"));

var _Promise = _promise.default;
var _debug = false;
var DEFAULT_KEY = '__NEXT_REDUX_STORE__';
var isServer = typeof window === 'undefined';

var setPromise = function setPromise(Promise) {
  return _Promise = Promise;
};
/**
 * @param makeStore
 * @param initialState
 * @param config
 * @param ctx
 * @return {{getState: function, dispatch: function}}
 */


exports.setPromise = setPromise;

var initStore = function initStore(_ref) {
  var makeStore = _ref.makeStore,
      initialState = _ref.initialState,
      config = _ref.config,
      _ref$ctx = _ref.ctx,
      ctx = _ref$ctx === void 0 ? {} : _ref$ctx;
  var storeKey = config.storeKey;

  var createStore = function createStore() {
    return makeStore(config.deserializeState(initialState), (0, _objectSpread2.default)({}, ctx, config, {
      isServer: isServer
    }));
  };

  if (isServer) return createStore(); // Memoize store if client

  if (!window[storeKey]) {
    window[storeKey] = createStore();
  }

  return window[storeKey];
};
/**
 * @param makeStore
 * @param config
 * @return {function(App): {getInitialProps, new(): WrappedApp, prototype: WrappedApp}}
 */


var _default = function _default(makeStore) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  config = (0, _objectSpread2.default)({
    storeKey: DEFAULT_KEY,
    debug: _debug,
    serializeState: function serializeState(state) {
      return state;
    },
    deserializeState: function deserializeState(state) {
      return state;
    }
  }, config);
  return function (App) {
    var _class, _temp;

    return _temp = _class =
    /*#__PURE__*/
    function (_Component) {
      (0, _inherits2.default)(WrappedApp, _Component);

      function WrappedApp(props, context) {
        var _this;

        (0, _classCallCheck2.default)(this, WrappedApp);
        _this = (0, _possibleConstructorReturn2.default)(this, (WrappedApp.__proto__ || (0, _getPrototypeOf.default)(WrappedApp)).call(this, props, context));
        var initialState = props.initialState,
            store = props.store;
        var hasStore = store && 'dispatch' in store && 'getState' in store; //TODO Always recreate the store even if it could be reused? @see https://github.com/zeit/next.js/pull/4295#pullrequestreview-118516366

        store = hasStore ? store : initStore({
          makeStore: makeStore,
          initialState: initialState,
          config: config
        });
        if (config.debug) console.log('4. WrappedApp.render', hasStore ? 'picked up existing one,' : 'created new store with', 'initialState', initialState);
        _this.store = store;
        return _this;
      }

      (0, _createClass2.default)(WrappedApp, [{
        key: "render",
        value: function render() {
          var _props = this.props,
              initialProps = _props.initialProps,
              initialState = _props.initialState,
              store = _props.store,
              props = (0, _objectWithoutProperties2.default)(_props, ["initialProps", "initialState", "store"]); // Cmp render must return something like <Provider><Component/></Provider>

          return _react.default.createElement(App, (0, _extends2.default)({}, props, initialProps, {
            store: this.store
          }));
        }
      }]);
      return WrappedApp;
    }(_react.Component), Object.defineProperty(_class, "displayName", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: "withRedux(".concat(App.displayName || App.name || 'App', ")")
    }), Object.defineProperty(_class, "getInitialProps", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function () {
        var _value = (0, _asyncToGenerator2.default)(
        /*#__PURE__*/
        _regenerator.default.mark(function _callee(appCtx) {
          var store, initialProps;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (appCtx) {
                    _context.next = 2;
                    break;
                  }

                  throw new Error('No app context');

                case 2:
                  if (appCtx.ctx) {
                    _context.next = 4;
                    break;
                  }

                  throw new Error('No page context');

                case 4:
                  store = initStore({
                    makeStore: makeStore,
                    config: config,
                    ctx: appCtx.ctx
                  });
                  if (config.debug) console.log('1. WrappedApp.getInitialProps wrapper got the store with state', store.getState());
                  appCtx.ctx.store = store;
                  appCtx.ctx.isServer = isServer;
                  initialProps = {};

                  if (!('getInitialProps' in App)) {
                    _context.next = 13;
                    break;
                  }

                  _context.next = 12;
                  return App.getInitialProps.call(App, appCtx);

                case 12:
                  initialProps = _context.sent;

                case 13:
                  if (config.debug) console.log('3. WrappedApp.getInitialProps has store state', store.getState());
                  return _context.abrupt("return", {
                    store: store,
                    isServer: isServer,
                    initialState: config.serializeState(store.getState()),
                    initialProps: initialProps
                  });

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function value(_x) {
          return _value.apply(this, arguments);
        };
      }()
    }), _temp;
  };
};

exports.default = _default;